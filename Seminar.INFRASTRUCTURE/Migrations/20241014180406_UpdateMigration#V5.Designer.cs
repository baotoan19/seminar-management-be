// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seminar.INFRASTRUCTURE.Database;

#nullable disable

namespace Seminar.INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(SeminarContext))]
    [Migration("20241014180406_UpdateMigration#V5")]
    partial class UpdateMigrationV5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Acceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResearchTopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResearchTopicId")
                        .IsUnique();

                    b.ToTable("Acceptances");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpload")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWord")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("InternalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("FacultyId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author_Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Author_Articles");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author_ResearchTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResearchTopicId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResearchTopicId");

                    b.ToTable("Author_ResearchTopics");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompetitionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganizerId")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Conclude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Concludes");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.History_Update_ResearchTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewProductFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewReportFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResearchTopicId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResearchTopicId");

                    b.ToTable("History_Update_ResearchTopics");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RecevierId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpload")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.RegistrationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsAccepted")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("RegistrationForms");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.ResearchTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AchievedResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpLoad")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcceptanceStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewStatus")
                        .HasColumnType("bit");

                    b.Property<string>("NameTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("ResearchTopics");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<int>("ResearchTopicId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ResearchTopicId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Review_Assignments");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewCommitteeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Review_Committees");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConcludeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_Upload")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("History_Update_ResearchTopicId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConcludeId");

                    b.HasIndex("History_Update_ResearchTopicId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Review_Forms");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcademicRank")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Review_CommitteeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("DisciplineId");

                    b.HasIndex("Review_CommitteeId");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Acceptance", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.ResearchTopic", "ResearchTopic")
                        .WithOne("Acceptance")
                        .HasForeignKey("Seminar.DOMAIN.Entitys.Acceptance", "ResearchTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchTopic");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Account", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Article", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Account", "Account")
                        .WithOne("Author")
                        .HasForeignKey("Seminar.DOMAIN.Entitys.Author", "AccountId");

                    b.HasOne("Seminar.DOMAIN.Entitys.Faculty", "Faculty")
                        .WithMany("Authors")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Account");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author_Article", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Article", "Article")
                        .WithMany("Author_Articles")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Seminar.DOMAIN.Entitys.Author", "Author")
                        .WithMany("Author_Articles")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author_ResearchTopic", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Author", "Author")
                        .WithMany("Author_ResearchTopics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.ResearchTopic", "ResearchTopic")
                        .WithMany("Author_ResearchTopics")
                        .HasForeignKey("ResearchTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ResearchTopic");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Competition", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Organizer", "Organizer")
                        .WithMany("Competitions")
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.History_Update_ResearchTopic", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.ResearchTopic", "ResearchTopic")
                        .WithMany("History_Update_ResearchTopics")
                        .HasForeignKey("ResearchTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchTopic");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Notification", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.NotificationType", "NotificationTypes")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationTypes");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Organizer", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Account", "Account")
                        .WithOne("Organizer")
                        .HasForeignKey("Seminar.DOMAIN.Entitys.Organizer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.Faculty", "Faculty")
                        .WithMany("Organizers")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Account");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Post", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Organizer", "Organizers")
                        .WithMany("Posts")
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Organizers");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.RegistrationForm", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Author", "Author")
                        .WithMany("RegistrationForms")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.Competition", "Competition")
                        .WithMany("RegistrationForms")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.ResearchTopic", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Article", "Articles")
                        .WithMany("ResearchTopics")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Seminar.DOMAIN.Entitys.Competition", "Competitions")
                        .WithMany("ResearchTopics")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.Discipline", "Disciplines")
                        .WithMany("ResearchTopics")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articles");

                    b.Navigation("Competitions");

                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Assignment", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Organizer", "Organizer")
                        .WithMany("Review_Assignments")
                        .HasForeignKey("OrganizerId");

                    b.HasOne("Seminar.DOMAIN.Entitys.ResearchTopic", "ResearchTopic")
                        .WithMany("Review_Assignments")
                        .HasForeignKey("ResearchTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.Reviewer", "Reviewer")
                        .WithMany("Review_Assignments")
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Organizer");

                    b.Navigation("ResearchTopic");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Committee", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Competition", "Competitions")
                        .WithMany("Review_Committees")
                        .HasForeignKey("CompetitionId");

                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Form", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Conclude", "Conclude")
                        .WithMany("Review_Forms")
                        .HasForeignKey("ConcludeId");

                    b.HasOne("Seminar.DOMAIN.Entitys.History_Update_ResearchTopic", "History_Update_ResearchTopic")
                        .WithMany("Review_Forms")
                        .HasForeignKey("History_Update_ResearchTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.Reviewer", "Reviewer")
                        .WithMany("Review_Forms")
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Conclude");

                    b.Navigation("History_Update_ResearchTopic");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Reviewer", b =>
                {
                    b.HasOne("Seminar.DOMAIN.Entitys.Account", "Account")
                        .WithOne("Reviewer")
                        .HasForeignKey("Seminar.DOMAIN.Entitys.Reviewer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seminar.DOMAIN.Entitys.Discipline", "Discipline")
                        .WithMany("Reviewers")
                        .HasForeignKey("DisciplineId");

                    b.HasOne("Seminar.DOMAIN.Entitys.Review_Committee", "Review_Committee")
                        .WithMany("Reviewers")
                        .HasForeignKey("Review_CommitteeId");

                    b.Navigation("Account");

                    b.Navigation("Discipline");

                    b.Navigation("Review_Committee");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Account", b =>
                {
                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Organizer")
                        .IsRequired();

                    b.Navigation("Reviewer")
                        .IsRequired();
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Article", b =>
                {
                    b.Navigation("Author_Articles");

                    b.Navigation("ResearchTopics");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Author", b =>
                {
                    b.Navigation("Author_Articles");

                    b.Navigation("Author_ResearchTopics");

                    b.Navigation("RegistrationForms");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Competition", b =>
                {
                    b.Navigation("RegistrationForms");

                    b.Navigation("ResearchTopics");

                    b.Navigation("Review_Committees");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Conclude", b =>
                {
                    b.Navigation("Review_Forms");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Discipline", b =>
                {
                    b.Navigation("ResearchTopics");

                    b.Navigation("Reviewers");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Faculty", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Organizers");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.History_Update_ResearchTopic", b =>
                {
                    b.Navigation("Review_Forms");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Organizer", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Posts");

                    b.Navigation("Review_Assignments");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.ResearchTopic", b =>
                {
                    b.Navigation("Acceptance")
                        .IsRequired();

                    b.Navigation("Author_ResearchTopics");

                    b.Navigation("History_Update_ResearchTopics");

                    b.Navigation("Review_Assignments");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Review_Committee", b =>
                {
                    b.Navigation("Reviewers");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Reviewer", b =>
                {
                    b.Navigation("Review_Assignments");

                    b.Navigation("Review_Forms");
                });

            modelBuilder.Entity("Seminar.DOMAIN.Entitys.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
